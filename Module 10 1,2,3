# 1.
# Write an Elevator class that receives the numbers of the bottom and top floors as initializer parameters.
# The elevator has methods go_to_floor, floor_up and floor_down. A new elevator is always at the bottom floor.
# If you make elevator h for example the method call h.go_to_floor(5),
# the method calls either the floor_up or floor_down methods as many times as it needs to get to the fifth floor.
# The methods run the elevator one floor up or down and tell what floor the elevator is after each move.
# Test the class by creating an elevator in the main program,
# tell it to move to a floor of your choice and then back to the bottom floor.

'''class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.floor = bottom_floor    #also cur_floor

    def floor_up(self):
        if self.floor < self.top_floor:
            self.floor += 1

    def floor_down(self):
        if self.floor > self.bottom_floor:
            self.floor -= 1

    def go_to_floor(self, floor):
        while self.floor < self.top_floor:
            self.floor_up()
        while self.floor > self.bottom_floor:
            self.floor_down()
        print(f"Moved to floor {floor}")

h = Elevator(1,10)

h.go_to_floor(1)'''

# 2.
# Extend the previous program by creating a Building class.
# The initializer parameters for the class are the numbers of the bottom and top floors and the number of elevators in the building.
# When a building is created, the building creates the required number of elevators.
# The list of elevators is stored as a property of the building.
# Write a method called run_elevator that accepts the number of the elevator and the destination floor as its parameters.
# In the main program,
# write the statements for creating a new building and running the elevators of the building.
'''
class Building:
    def __init__(self, bottom_floor, top_floor, elevators):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.elevators_list = []
        for e in range(elevators):
            elevator = Elevator(bottom_floor, top_floor)
            self.elevators_list.append(elevator)

    def run_elevator(self, choose_a_floor, elevator):
        elevator1 = self.elevators_list[elevator - 1]
        elevator1.go_to_floor(choose_a_floor)
        print(f"Elevator {elevator} went to floor {choose_a_floor}")

class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.floor = bottom_floor    #also cur_floor

    def floor_up(self):
        if self.floor < self.top_floor:
            self.floor += 1

    def floor_down(self):
        if self.floor > self.bottom_floor:
            self.floor -= 1

    def go_to_floor(self, floor):
        while self.floor > self.floor:
            self.floor_up()
        while self.floor < self.floor:
            self.floor_down()
        #print(f"Moved to floor {floor}")

h = Elevator(1,10)
b = Building(1, 5, 2)
b.run_elevator(5, 2)
#h.go_to_floor(1)'''


# 1.
# Write an Elevator class that receives the numbers of the bottom and top floors as initializer parameters.
# The elevator has methods go_to_floor, floor_up and floor_down. A new elevator is always at the bottom floor.
# If you make elevator h for example the method call h.go_to_floor(5),
# the method calls either the floor_up or floor_down methods as many times as it needs to get to the fifth floor.
# The methods run the elevator one floor up or down and tell what floor the elevator is after each move.
# Test the class by creating an elevator in the main program,
# tell it to move to a floor of your choice and then back to the bottom floor.

'''class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.floor = bottom_floor    #also cur_floor

    def floor_up(self):
        if self.floor < self.top_floor:
            self.floor += 1

    def floor_down(self):
        if self.floor > self.bottom_floor:
            self.floor -= 1

    def go_to_floor(self, floor):
        while self.floor < self.top_floor:
            self.floor_up()
        while self.floor > self.bottom_floor:
            self.floor_down()
        print(f"Moved to floor {floor}")
        
h = Elevator(1,10)

h.go_to_floor(1)''''''

# 2.
# Extend the previous program by creating a Building class.
# The initializer parameters for the class are the numbers of the bottom and top floors and the number of elevators in the building.
# When a building is created, the building creates the required number of elevators.
# The list of elevators is stored as a property of the building.
# Write a method called run_elevator that accepts the number of the elevator and the destination floor as its parameters.
# In the main program,
# write the statements for creating a new building and running the elevators of the building.
'''
'''class Building:
    def __init__(self, bottom_floor, top_floor, elevators):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.elevators_list = []
        for e in range(elevators):
            elevator = Elevator(bottom_floor, top_floor)
            self.elevators_list.append(elevator)

    def run_elevator(self, choose_a_floor, elevator):
        elevator1 = self.elevators_list[elevator - 1]
        elevator1.go_to_floor(choose_a_floor)
        print(f"Elevator {elevator} went to floor {choose_a_floor}")

class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.floor = bottom_floor    #also cur_floor

    def floor_up(self):
        if self.floor < self.top_floor:
            self.floor += 1

    def floor_down(self):
        if self.floor > self.bottom_floor:
            self.floor -= 1

    def go_to_floor(self, floor):
        while self.floor > self.floor:
            self.floor_up()
        while self.floor < self.floor:
            self.floor_down()
        #print(f"Moved to floor {floor}")

h = Elevator(1,10)
b = Building(1, 5, 2)
b.run_elevator(5, 2)
#h.go_to_floor(1)'''


# 3.
# Extend the program again by adding a method fire_alarm that does not
# receive any parameters and moves all elevators to the bottom floor.
# Continue the main program by causing a fire alarm in your building.

# It should work now!

class Building:
    def __init__(self, bottom_floor, top_floor, elevators):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.elevators_list = []
        for e in range(elevators):
            elevator = Elevator(bottom_floor, top_floor)
            self.elevators_list.append(elevator)

    def fire_alarm(self):
        for all_elevators in self.elevators_list:
            all_elevators.go_to_floor(self.bottom_floor)
        print("FIRE, elevators going down!")

    def run_elevator(self, choose_a_floor, elevator):
        elevator1 = self.elevators_list[elevator - 1]
        elevator1.go_to_floor(choose_a_floor)
        print(f"Elevator {elevator} went to floor {choose_a_floor}")

class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.floor = bottom_floor    #also cur_floor

    def floor_up(self):
        if self.floor < self.top_floor:
            self.floor += 1

    def floor_down(self):
        if self.floor > self.bottom_floor:
            self.floor -= 1

    def go_to_floor(self, floor):
        while self.floor > self.floor:
            self.floor_up()
        while self.floor < self.floor:
            self.floor_down()
        #print(f"Moved to floor {floor}")

h = Elevator(1,10)
b = Building(1, 5, 2)
b.run_elevator(5, 2)
b.fire_alarm()
#b.fire_alarm()    #TEST!

#h.go_to_floor(1)
b.run_elevator(
